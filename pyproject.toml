[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mr-fat-controller"
dynamic = ["version"]
description = 'Model Railway Fat Controller'
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = []
authors = [{ name = "Mark Hall", email = "mark.hall@work.room3b.eu" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "alembic>=1,<2",
  "asyncpg<1",
  "aiomqtt>=2.2.0,<3",
  "fastapi",
  "pydantic>=2,<3",
  "pydantic-settings>=2,<3",
  "sqlalchemy>=2,<3",
  "sqlalchemy-json>=0.7.0,<0.8.0",
  "typer<1",
  "uvicorn[standard]<1",
]

[project.urls]
Documentation = "https://github.com/unknown/mr-fat-controller#readme"
Issues = "https://github.com/unknown/mr-fat-controller/issues"
Source = "https://github.com/unknown/mr-fat-controller"

[tool.hatch.version]
path = "mr_fat_controller/__about__.py"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest", "ruff>=0.5.0"]

[tool.hatch.envs.default.scripts]
server = "cd dev && uvicorn --reload --reload-dir ../mr_fat_controller mr_fat_controller.server:app {args}"
mr-fat-controller = "cd dev && python -m mr_fat_controller {args}"
build-frontend = "cd mr_fat_controller/frontend && npm install && npx vite build --watch"
create-migration = "DSN='dummy' alembic -c alembic.ini revision {args}"
test = "cd tests && pytest {args:.}"
test-cov = "cd tests && coverage run -m pytest {args:.}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
style = "ruff check --fix {args:.}"
format = "ruff format {args:.}"

[tool.ruff]
target-version = "py311"
line-length = 120
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore single-line string concatenation
  "ISC001",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["mr_fat_controller"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["mr_fat_controller", "tests"]
branch = true
parallel = true
omit = ["mr_fat_controller/__about__.py"]

[tool.coverage.paths]
mr_fat_controller = [
  "mr_fat_controller",
  "*/mr-fat-controller/mr_fat_controller",
]
tests = ["tests", "*/mr-fat-controller/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
